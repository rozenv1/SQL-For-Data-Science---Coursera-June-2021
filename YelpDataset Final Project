# SQL-For-Data-Science---Coursera-June-2021
Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.

Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10,000
SELECT COUNT (*)
FROM attribute

ii. Business table = 10,000
SELECT COUNT (*)
FROM business

iii. Category table = 10,000
SELECT COUNT (*)
FROM category

iv. Checkin table = 10,000
SELECT COUNT (*)
FROM checkin

v. elite_years table = 10,000
SELECT COUNT (*)
FROM elite_years

vi. friend table = 10,000
SELECT COUNT (*)
FROM friend

vii. hours table = 10,000
SELECT COUNT (*)
FROM hours

viii. photo table = 10,000
SELECT COUNT (*)
FROM photo

ix. review table = 10,000
SELECT COUNT (*)
FROM review

x. tip table = 10,000
SELECT COUNT (*)
FROM tip

xi. user table = 10,000
SELECT COUNT (*)
FROM user


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10,000
SELECT COUNT (DISTINCT id)
FROM business

ii. Hours = 1562
SELECT COUNT (DISTINCT business_id) -- foreign key
FROM hours

iii. Category = 2643
SELECT COUNT (DISTINCT business_id) -- foreign key
FROM category

iv. Attribute = 1115
SELECT COUNT (DISTINCT business_id) -- foreign key
FROM attribute

v. Review = 10,000
SELECT COUNT (DISTINCT id)
FROM review

vi. Checkin = 493
SELECT COUNT (DISTINCT business_id) -- foreign key
FROM checkin

vii. Photo = 10,000
SELECT DISTINCT (id)
FROM photo

viii. Tip = 537
SELECT COUNT (DISTINCT user_id) -- foreign key

FROM tip
 
ix. User = 10,000
SELECT COUNT (DISTINCT id)
FROM user

x. Friend = 11
SELECT COUNT (DISTINCT user_id)
FROM friend


xi. Elite_years = 2780
SELECT COUNT (DISTINCT user_id) -- foreign key
FROM elite_years

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	
	SQL code used to arrive at answer: 
SELECT COUNT (*)
FROM user
WHERE (id OR name OR review_count OR yelping_since OR useful OR funny OR cool OR fans OR average_stars OR compliment_hot OR compliment_more OR compliment_profile OR compliment_cute OR compliment_list OR compliment_cute OR compliment_plain OR compliment_cool OR compliment_funny OR compliment_writer OR compliment_photos) is null

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
SELECT min (stars)
, max (stars)
, avg (stars)
FROM review
	
	ii. Table: Business, Column: Stars
	
		min: 1		max:5	avg: 3.6549
SELECT min (stars)
, max (stars)
, avg (stars)
FROM business
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
SELECT min (likes)
, max (likes)
, avg (likes)
FROM tip
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
SELECT min (count)
, max (count)
, avg (count)
FROM checkin
	
	v. Table: User, Column: Review_count
	
		min:	0	max: 2000		avg: 24.2995

SELECT min (review_count)
, max (review_count)
, avg (review_count)
FROM user

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
SELECT city
, SUM (review_count) AS ReviewCount
FROM business
GROUP BY city
ORDER BY ReviewCount DESC

	Copy and Paste the Result Below:

+-----------------+-------------+
| city            | ReviewCount |
+-----------------+-------------+
| Las Vegas       |       82854 |
| Phoenix         |       34503 |
| Toronto         |       24113 |
| Scottsdale      |       20614 |
| Charlotte       |       12523 |
| Henderson       |       10871 |
| Tempe           |       10504 |
| Pittsburgh      |        9798 |
| Montréal        |        9448 |
| Chandler        |        8112 |
| Mesa            |        6875 |
| Gilbert         |        6380 |
| Cleveland       |        5593 |
| Madison         |        5265 |
| Glendale        |        4406 |
| Mississauga     |        3814 |
| Edinburgh       |        2792 |
| Peoria          |        2624 |
| North Las Vegas |        2438 |
| Markham         |        2352 |
| Champaign       |        2029 |
| Stuttgart       |        1849 |
| Surprise        |        1520 |
| Lakewood        |        1465 |
| Goodyear        |        1155 |
+-----------------+-------------+
(Output limit exceeded, 25 of 362 total rows shown)

6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT stars
, COUNT (id) AS number_of_business
FROM business
WHERE city = 'Avon'
GROUP by stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+--------------------+
| stars | number_of_business |
+-------+--------------------+
|   1.5 |                  1 |
|   2.5 |                  2 |
|   3.5 |                  3 |
|   4.0 |                  2 |
|   4.5 |                  1 |
|   5.0 |                  1 |
+-------+--------------------+


ii. Beachwood

SQL code used to arrive at answer:
SELECT stars
, COUNT (id) AS number_of_business
FROM business
WHERE city = 'Beachwood'
GROUP by stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+--------------------+
| stars | number_of_business |
+-------+--------------------+
|   2.0 |                  1 |
|   2.5 |                  1 |
|   3.0 |                  2 |
|   3.5 |                  2 |
|   4.0 |                  1 |
|   4.5 |                  2 |
|   5.0 |                  5 |
+-------+--------------------+
		
7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
SELECT name
, review_count
FROM user
ORDER BY review_count DESC
LIMIT 3
		
	Copy and Paste the Result Below:
		
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

8. Does posting more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

